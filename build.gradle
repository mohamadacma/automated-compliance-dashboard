plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '3.2.0'
}

group 'com.techinnovate.compliancedashboard'
version '1.0.0'
defaultTasks 'clean', 'build'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
    implementation 'com.amazonaws:aws-java-sdk-dynamodb:1.12.+'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.14.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.mockito:mockito-core:5.2.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    jacoco {
        destinationFile = file("$buildDir/jacoco/${name}.exec")
    }
}
checkstyle {
    toolVersion '8.17'
    configFile = file("${rootDir}/checkstyle.xml")
    def suppressionFile = file("${rootDir}/suppressions.xml")
    if (suppressionFile.exists()) {
        configProperties.put('checkstyle.suppression.filter', suppressionFile)
    }
}

checkstyleMain.doFirst {
    ignoreFailures = !gradle.taskGraph.allTasks.any({ it.name ==~ /.*staticchecks/ })
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0  // You can adjust this value as needed
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification